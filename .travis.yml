#sudo for using docker
sudo: required
services:
    #install a copy of docker into the running container
    - docker

#run before test, build docker image before run
before_install:
    #naming the image building as nathanwkwong/docker-react following Dockerfile.dev in ./
    - docker build -t nathanwkwong/docker-react -f Dockerfile.dev .

#command for run the test suit
#return status code other than 0 -> tests failed
#hand and wait for input in react test suit
script:
    #run one time only test, -e CI=true
    - docker run -e CI=true nathanwkwong/docker-react npm run test

deploy: #aws, digital ocean
    provider: elasticbeanstalk
    region: "us-east-1"
    app: Docker-small
    env: "DockerSmall-env"
    #provide the name to take all files from github -> zip -> S3 bucket -> poke to elasticbeanstalk -> future deploy
    #check the exist of S3 bucket auto generated from elasticbeanstalk initialization
    bucket_name: "elasticbeanstalk-us-east-1-403354037318"
    #default path as app name
    bucket_path: "Docker-small"
    #deploy only when push master
    on: 
        branch: master
    access_key_id: $AWS_ACCESS_KEY
    secret_access_key: $AWS_SECRET_KEY

    # -> IAM (manage api keys) -> Users -> username: docker-react-travis-ci
    # -> Access type: Programmatic access
    # access_key_id: $AWS_ACCESS_KEY
    # secret_access_key: $AWS_SECRET_KEY
    # attach existing policies directly
    # search - beanstalk -> check AWSElasticBeanstalkFullAccess > next: Review

#circle: Development -> testing -> Deployment

#Docker within CI/CD:
#github repo: 
  ##create a repo
  #get it to local
  #push it to remote repo
#feature branches(pull it and push it to it)
#master(
  #pull request and merge it to master -> 

#-> test with Travis CI - .travis.yml
#tell travis to copy a docker running
#tell travis to build the image using Dockerfile.dev (running test)
#tell travis how to run the test suite
#tell travis how to deploy the code to AWS

#-> if test success to hosting provider -> auto deploy 
#-> AWS Hosting Elastic Beanstalk - start with production docker instance
# suitable for run one container at a time 

#create application -> web app -> name: docker, platform: Docker, Application code: sample Application
#AWS: elastic beanstalk(-> load balance -> route request to VM running docker[Docker Container[App]])
#monitor traffic into VM -> (auto scale up)add more VMs for more traffic
#->config Travis auto deploy to AWS after passing of test


#not work after deploy because no port exposed as:
#docker run -p 3000:3000 <container_id>









