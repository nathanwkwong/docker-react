
#can reduce docker run ... command with docker-compose up
#auto create the containers and a network for them
version: "3"

services:
    web:
        # build: .
        build:
            #specific where the files and folders for the image to be pulled from
            #context: ./reactproject
            context: .
            #deal with "Cannot locate specified Dockerfile: Dockerfile"
            dockerfile: Dockerfile.dev
        ports:
            - "3000:3000"
        volumes: 
            #bookmarking/placeholder
            - /app/node_modules
            #referencing/mapping from local machine:
            - ./:/app
        stdin_open: true
        restart: "no"
        environment:
            #detecting change
            - CHOKIDAR_USEPOLLING=true
    #M2: start of second container at the same time
    #docker-compose up --build for new added container
    # tests:
    #     build:
    #         context: .
    #         dockerfile: Dockerfile.dev
    #     volumes: 
    #         - /app/node_modules
    #         - ./:/app
    #     #overrider starting command
    #     command: ["npm", "run", "test"]
    #     stdin_open: true
    #     restart: "no"
    #     environment:
    #         - CHOKIDAR_USEPOLLING=true

#M1: reuse container to run the updated test: 
# docker exec -it f04ee94c42ab npm run test + rerun the test

#M2: add within the same docker-compose file
# bad: show logging from docker-compose, can't enter STD in/output to the container 

#M3(not work): docker attach + custom input to directly manipulate the test container
#forward std in+out+err of the primary process directly to specific container
#docker attach <container_id>

#problem: can't manipulate the test suite

#npm run test
#npm process +  test.js process
#std in npm always by docker attach


#react in 
#web container(dev): Dev Server + index.html + main.js

#web container(production): production server(nginx) + index.html + main.js

#multi step build process inside Dockerfile:

#1) container 1(Build phase)
#use base image(node:alpine)
#copy package.json file
#install dependencies (use only files under build)
#run 'npm run build'

#2) container 2(Run phase)
#use nginx (2nd base image)
#copy the result of 'npm run build' (drop others files/folders out)
#start nginx


